// SPDX-License-Identifier: MIT
pragma solidity ^0.8.17;

contract KittyBreeding {
    struct KittyInfo {
        bool gender; // true = matron
        uint birthTime; // block height
        address owner;
    }

    struct Kitty {
        uint id;
        uint genes;
        uint matronId;
        uint sireId;        
        uint lastBreed; // block height
    }
    
    KittyInfo[] @global allKitties;
    KittyInfo[] @local newBorns;
    uint @local newBornNums;
    uint @global newBornNumsCollect;

    mapping(uint => Kitty) @address myKitties;
	
    function create(bool gender, address owner) @global internal returns (uint) {
        uint id = allKitties.length;

        KittyInfo memory n;
        n.gender = gender;
        n.birthTime = block.number;
        n.owner = owner;
        allKitties.push(n);

        return id;   
    }

	function mint(address owner, uint genes, bool gender) @global public
	{
		relay @global (^owner, ^genes, ^gender)
		{
			uint id = create(gender, owner);
        	relay@owner (^genes, ^id) {
        		_addNewKittyToAddr(msg.scope, genes, id, type(uint256).max, type(uint256).max);
			}
		}
	}

    function _addNewKittyToAddr(uint genes, uint id, uint matronId, uint sireId) @address internal {
        Kitty memory newKitty;
        newKitty.id = id;
        newKitty.genes = genes;
        newKitty.matronId = matronId;
        newKitty.sireId = sireId;
        newKitty.lastBreed = block.number;
        myKitties[id] = newKitty;
    }
    
    function sqrt(uint x) internal pure returns (uint) {
        uint z = (x + 1) / 2;
        uint y = x;
        while (z < y) {
            y = z;
            z = (x / z + z) / 2;
        }
        return y;
    }

    function genesMix(uint m_genes, uint s_gengs) internal pure returns (uint) {
        uint new_genes = sqrt(m_genes) * sqrt(s_gengs); // genes mixture
        new_genes = sqrt(m_genes) * sqrt(s_gengs); // genes mixture
        new_genes = sqrt(m_genes) * sqrt(s_gengs); // genes mixture
        new_genes = sqrt(m_genes) * sqrt(s_gengs); // genes mixture
        new_genes = sqrt(m_genes) * sqrt(s_gengs); // genes mixture
        new_genes = sqrt(m_genes) * sqrt(s_gengs); // genes mixture
        return new_genes;
    }

    function breed(uint m, uint s, bool gender) @address public {
        require(m < allKitties.length);
        require(s < allKitties.length);
        require(allKitties[m].gender);
        require(!allKitties[s].gender);
        relay@allKitties[m].owner (^m, ^s, ^gender){
			// require(myKitties[m].lastBreed + 100 < block.number) // breed cooldown
        	myKitties[m].lastBreed = block.number;
        	relay@allKitties[s].owner (var m_genes = myKitties[m].genes, ^m, ^s, ^gender){
				uint new_genes = genesMix(m_genes, myKitties[s].genes);
				relay@msg.scope (^m, ^s, ^gender, ^new_genes)
				{
					uint birth_time = block.number;
					uint id_nb = newBorns.length | (1 << 255);
					_addNewKittyToAddr(msg.scope, new_genes, id_nb, m, s);

					KittyInfo memory n;
					n.gender = gender;
					n.birthTime = birth_time;
					n.owner = msg.scope;
					newBornNums++;
				}
			}
		}
    }

	function finalize() @address public {
		relay@global () {
			relay@locals () {
				if (newBorns.length > 0) {
					address[] memory _addresses = new address[](newBorns.length);
					for(uint i = 0; i < newBorns.length; ++i){
						_addresses[i] = newBorns[i].owner;
					}
					relay@global (^_addresses){
						for(uint i = 0; i < _addresses.length; i++) {
							uint id = _addresses.length;
							// allKitties.push(new_borns[i]);
							relay@_addresses[i] (^i, ^id) {
								uint id_nb = (1 << 255) | i;
								myKitties[id] = myKitties[id_nb];
								delete myKitties[id_nb];
							}
						}
					}
					delete newBorns;
				}
			}
		}
	}

}