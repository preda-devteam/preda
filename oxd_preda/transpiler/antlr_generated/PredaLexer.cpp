
// Generated from Preda.g4 by ANTLR 4.12.0


#include "PredaLexer.h"


using namespace antlr4;



using namespace antlr4;

namespace {

struct PredaLexerStaticData final {
  PredaLexerStaticData(std::vector<std::string> ruleNames,
                          std::vector<std::string> channelNames,
                          std::vector<std::string> modeNames,
                          std::vector<std::string> literalNames,
                          std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), channelNames(std::move(channelNames)),
        modeNames(std::move(modeNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  PredaLexerStaticData(const PredaLexerStaticData&) = delete;
  PredaLexerStaticData(PredaLexerStaticData&&) = delete;
  PredaLexerStaticData& operator=(const PredaLexerStaticData&) = delete;
  PredaLexerStaticData& operator=(PredaLexerStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> channelNames;
  const std::vector<std::string> modeNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag predalexerLexerOnceFlag;
PredaLexerStaticData *predalexerLexerStaticData = nullptr;

void predalexerLexerInitialize() {
  assert(predalexerLexerStaticData == nullptr);
  auto staticData = std::make_unique<PredaLexerStaticData>(
    std::vector<std::string>{
      "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
      "T__9", "T__10", "T__11", "T__12", "T__13", "T__14", "T__15", "T__16", 
      "T__17", "T__18", "T__19", "T__20", "T__21", "T__22", "T__23", "T__24", 
      "T__25", "T__26", "T__27", "T__28", "T__29", "T__30", "T__31", "T__32", 
      "T__33", "T__34", "T__35", "T__36", "T__37", "T__38", "T__39", "T__40", 
      "T__41", "T__42", "T__43", "T__44", "T__45", "T__46", "T__47", "T__48", 
      "T__49", "T__50", "T__51", "T__52", "T__53", "T__54", "T__55", "T__56", 
      "DoxygenSingle", "DoxygenMulti", "BreakKeyword", "ConstantKeyword", 
      "ContinueKeyword", "RelayKeyword", "SupplyKeyword", "IfKeyword", "ElseKeyword", 
      "ShardKeyword", "ShardsKeyword", "GlobalKeyword", "AddressKeyword", 
      "AutoKeyword", "MinerKeyword", "StructKeyword", "EnumKeyword", "ContractKeyword", 
      "ImportKeyword", "FunctionKeyword", "PublicKeyword", "ExportKeyword", 
      "AsKeyword", "UsingKeyword", "InterfaceKeyword", "ImplementsKeyword", 
      "DeployKeyword", "ConstructorKeyword", "NextKeyword", "FloatType", 
      "IntType", "UintType", "BooleanLiteral", "DecimalFloatLiteral", "DecimalIntegerLiteral", 
      "DecimalIntegerLiteralBody", "AddressLiteral", "HashLiteral", "Base32Len58", 
      "Base32Len52", "Base32Len7", "Base32", "IntegerLiteralSuffix", "FloatLiteralSuffix", 
      "DecimalDigit", "HexIntegerLiteral", "HexIntegerLiteralBody", "DecimalBigIntegerLiteral", 
      "HexBigIntegerLiteral", "HexDigit", "Identifier", "IdentifierStart", 
      "IdentifierBody", "StringLiteral", "StringCharacter", "WS", "COMMENT", 
      "LINE_COMMENT"
    },
    std::vector<std::string>{
      "DEFAULT_TOKEN_CHANNEL", "HIDDEN"
    },
    std::vector<std::string>{
      "DEFAULT_MODE"
    },
    std::vector<std::string>{
      "", "'.'", "';'", "'['", "','", "']'", "'='", "'{'", "'}'", "'@'", 
      "'('", "')'", "'bool'", "'string'", "'blob'", "'hash'", "'bigint'", 
      "'map'", "'<'", "'>'", "'scattered_map'", "'array'", "'scattered_array'", 
      "'while'", "'^'", "'for'", "'do'", "'return'", "'++'", "'--'", "'+'", 
      "'-'", "'!'", "'~'", "'*'", "'/'", "'%'", "'<<'", "'<='", "'>='", 
      "'=='", "'!='", "'&'", "'|'", "'&&'", "'||'", "'\\u003F'", "':'", 
      "'+='", "'-='", "'*='", "'/='", "'%='", "'<<='", "'>>='", "'&='", 
      "'^='", "'|='", "", "", "'break'", "'const'", "'continue'", "'relay'", 
      "'supply'", "'if'", "'else'", "'shard'", "'shards'", "'global'", "'address'", 
      "'auto'", "'miner'", "'struct'", "'enum'", "'contract'", "'import'", 
      "'function'", "'public'", "'export'", "'as'", "'using'", "'interface'", 
      "'implements'", "'deploy'", "'constructor'", "'next'"
    },
    std::vector<std::string>{
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
      "", "", "", "", "", "", "", "DoxygenSingle", "DoxygenMulti", "BreakKeyword", 
      "ConstantKeyword", "ContinueKeyword", "RelayKeyword", "SupplyKeyword", 
      "IfKeyword", "ElseKeyword", "ShardKeyword", "ShardsKeyword", "GlobalKeyword", 
      "AddressKeyword", "AutoKeyword", "MinerKeyword", "StructKeyword", 
      "EnumKeyword", "ContractKeyword", "ImportKeyword", "FunctionKeyword", 
      "PublicKeyword", "ExportKeyword", "AsKeyword", "UsingKeyword", "InterfaceKeyword", 
      "ImplementsKeyword", "DeployKeyword", "ConstructorKeyword", "NextKeyword", 
      "FloatType", "IntType", "UintType", "BooleanLiteral", "DecimalFloatLiteral", 
      "DecimalIntegerLiteral", "DecimalIntegerLiteralBody", "AddressLiteral", 
      "HashLiteral", "HexIntegerLiteral", "HexIntegerLiteralBody", "DecimalBigIntegerLiteral", 
      "HexBigIntegerLiteral", "Identifier", "StringLiteral", "WS", "COMMENT", 
      "LINE_COMMENT"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,0,104,963,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
  	7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,
  	14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,
  	21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,
  	28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,
  	35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,
  	42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,
  	49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,
  	56,7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,
  	63,7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,
  	70,7,70,2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,
  	77,7,77,2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,
  	84,7,84,2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,
  	91,7,91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
  	98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,
  	7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,7,109,2,110,
  	7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,1,0,1,0,1,1,1,1,
  	1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,
  	1,10,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,13,
  	1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,
  	1,15,1,15,1,16,1,16,1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,1,19,1,19,
  	1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,
  	1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,
  	1,21,1,21,1,21,1,21,1,22,1,22,1,22,1,22,1,22,1,22,1,23,1,23,1,24,1,24,
  	1,24,1,24,1,25,1,25,1,25,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,27,1,27,
  	1,27,1,28,1,28,1,28,1,29,1,29,1,30,1,30,1,31,1,31,1,32,1,32,1,33,1,33,
  	1,34,1,34,1,35,1,35,1,36,1,36,1,36,1,37,1,37,1,37,1,38,1,38,1,38,1,39,
  	1,39,1,39,1,40,1,40,1,40,1,41,1,41,1,42,1,42,1,43,1,43,1,43,1,44,1,44,
  	1,44,1,45,1,45,1,46,1,46,1,47,1,47,1,47,1,48,1,48,1,48,1,49,1,49,1,49,
  	1,50,1,50,1,50,1,51,1,51,1,51,1,52,1,52,1,52,1,52,1,53,1,53,1,53,1,53,
  	1,54,1,54,1,54,1,55,1,55,1,55,1,56,1,56,1,56,1,57,3,57,431,8,57,1,57,
  	1,57,1,57,1,57,1,57,5,57,438,8,57,10,57,12,57,441,9,57,1,57,1,57,1,58,
  	1,58,1,58,1,58,1,58,5,58,450,8,58,10,58,12,58,453,9,58,1,58,1,58,1,58,
  	1,58,1,59,1,59,1,59,1,59,1,59,1,59,1,60,1,60,1,60,1,60,1,60,1,60,1,61,
  	1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,62,1,62,1,62,1,62,1,62,1,62,
  	1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,64,1,64,1,64,1,65,1,65,1,65,1,65,
  	1,65,1,66,1,66,1,66,1,66,1,66,1,66,1,67,1,67,1,67,1,67,1,67,1,67,1,67,
  	1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,69,1,69,1,69,1,69,1,69,1,69,1,69,
  	1,69,1,70,1,70,1,70,1,70,1,70,1,71,1,71,1,71,1,71,1,71,1,71,1,72,1,72,
  	1,72,1,72,1,72,1,72,1,72,1,73,1,73,1,73,1,73,1,73,1,74,1,74,1,74,1,74,
  	1,74,1,74,1,74,1,74,1,74,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,76,1,76,
  	1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,77,1,77,1,77,1,77,1,77,1,77,1,77,
  	1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,79,1,79,1,79,1,80,1,80,1,80,1,80,
  	1,80,1,80,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,82,1,82,
  	1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,83,1,83,1,83,1,83,1,83,
  	1,83,1,83,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,
  	1,85,1,85,1,85,1,85,1,85,1,86,1,86,1,86,1,86,1,86,1,86,1,86,1,86,1,86,
  	1,86,1,86,1,86,1,86,1,86,1,86,1,86,1,86,1,86,1,86,1,86,1,86,1,86,1,86,
  	1,86,1,86,3,86,670,8,86,1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,
  	1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,
  	1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,
  	3,87,709,8,87,1,88,1,88,1,88,1,88,1,88,1,88,1,88,1,88,1,88,1,88,1,88,
  	1,88,1,88,1,88,1,88,1,88,1,88,1,88,1,88,1,88,1,88,1,88,1,88,1,88,1,88,
  	1,88,1,88,1,88,1,88,1,88,1,88,1,88,1,88,1,88,1,88,1,88,1,88,1,88,1,88,
  	1,88,1,88,1,88,1,88,1,88,3,88,755,8,88,1,89,1,89,1,89,1,89,1,89,1,89,
  	1,89,1,89,1,89,3,89,766,8,89,1,90,5,90,769,8,90,10,90,12,90,772,9,90,
  	1,90,1,90,4,90,776,8,90,11,90,12,90,777,1,90,3,90,781,8,90,1,91,1,91,
  	3,91,785,8,91,1,92,4,92,788,8,92,11,92,12,92,789,1,93,1,93,1,93,1,93,
  	1,93,1,93,1,93,1,93,1,93,1,93,1,93,1,93,1,93,1,93,1,93,1,93,1,93,3,93,
  	809,8,93,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,95,1,95,1,95,1,95,1,95,
  	1,95,1,95,1,95,1,95,1,95,1,95,1,96,1,96,1,96,1,96,1,96,1,96,1,96,1,96,
  	1,96,1,96,1,96,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,97,1,98,1,98,1,99,
  	1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,1,99,
  	1,99,1,99,3,99,867,8,99,1,100,1,100,1,100,1,100,1,100,1,100,1,100,1,100,
  	1,100,1,100,1,100,3,100,880,8,100,1,101,1,101,1,102,1,102,3,102,886,8,
  	102,1,103,1,103,1,103,1,103,5,103,892,8,103,10,103,12,103,895,9,103,1,
  	104,1,104,1,104,1,104,1,105,1,105,1,105,1,105,1,106,1,106,1,107,1,107,
  	5,107,909,8,107,10,107,12,107,912,9,107,1,108,1,108,1,109,1,109,1,110,
  	1,110,5,110,920,8,110,10,110,12,110,923,9,110,1,110,1,110,1,111,1,111,
  	1,111,3,111,930,8,111,1,112,4,112,933,8,112,11,112,12,112,934,1,112,1,
  	112,1,113,1,113,1,113,1,113,5,113,943,8,113,10,113,12,113,946,9,113,1,
  	113,1,113,1,113,1,113,1,113,1,114,1,114,1,114,1,114,5,114,957,8,114,10,
  	114,12,114,960,9,114,1,114,1,114,3,439,451,944,0,115,1,1,3,2,5,3,7,4,
  	9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,
  	17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,
  	57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,
  	40,81,41,83,42,85,43,87,44,89,45,91,46,93,47,95,48,97,49,99,50,101,51,
  	103,52,105,53,107,54,109,55,111,56,113,57,115,58,117,59,119,60,121,61,
  	123,62,125,63,127,64,129,65,131,66,133,67,135,68,137,69,139,70,141,71,
  	143,72,145,73,147,74,149,75,151,76,153,77,155,78,157,79,159,80,161,81,
  	163,82,165,83,167,84,169,85,171,86,173,87,175,88,177,89,179,90,181,91,
  	183,92,185,93,187,94,189,95,191,0,193,0,195,0,197,0,199,0,201,0,203,0,
  	205,96,207,97,209,98,211,99,213,0,215,100,217,0,219,0,221,101,223,0,225,
  	102,227,103,229,104,1,0,11,1,0,9,9,2,0,10,10,13,13,3,0,48,57,64,90,97,
  	122,2,0,105,105,117,117,1,0,48,57,2,0,88,88,120,120,3,0,48,57,65,70,97,
  	102,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,4,0,10,10,13,
  	13,34,34,92,92,3,0,9,10,12,13,32,32,993,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,
  	0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,
  	0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,
  	1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,
  	0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,
  	0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,
  	1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,
  	0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,
  	0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,
  	1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,
  	0,0,0,103,1,0,0,0,0,105,1,0,0,0,0,107,1,0,0,0,0,109,1,0,0,0,0,111,1,0,
  	0,0,0,113,1,0,0,0,0,115,1,0,0,0,0,117,1,0,0,0,0,119,1,0,0,0,0,121,1,0,
  	0,0,0,123,1,0,0,0,0,125,1,0,0,0,0,127,1,0,0,0,0,129,1,0,0,0,0,131,1,0,
  	0,0,0,133,1,0,0,0,0,135,1,0,0,0,0,137,1,0,0,0,0,139,1,0,0,0,0,141,1,0,
  	0,0,0,143,1,0,0,0,0,145,1,0,0,0,0,147,1,0,0,0,0,149,1,0,0,0,0,151,1,0,
  	0,0,0,153,1,0,0,0,0,155,1,0,0,0,0,157,1,0,0,0,0,159,1,0,0,0,0,161,1,0,
  	0,0,0,163,1,0,0,0,0,165,1,0,0,0,0,167,1,0,0,0,0,169,1,0,0,0,0,171,1,0,
  	0,0,0,173,1,0,0,0,0,175,1,0,0,0,0,177,1,0,0,0,0,179,1,0,0,0,0,181,1,0,
  	0,0,0,183,1,0,0,0,0,185,1,0,0,0,0,187,1,0,0,0,0,189,1,0,0,0,0,205,1,0,
  	0,0,0,207,1,0,0,0,0,209,1,0,0,0,0,211,1,0,0,0,0,215,1,0,0,0,0,221,1,0,
  	0,0,0,225,1,0,0,0,0,227,1,0,0,0,0,229,1,0,0,0,1,231,1,0,0,0,3,233,1,0,
  	0,0,5,235,1,0,0,0,7,237,1,0,0,0,9,239,1,0,0,0,11,241,1,0,0,0,13,243,1,
  	0,0,0,15,245,1,0,0,0,17,247,1,0,0,0,19,249,1,0,0,0,21,251,1,0,0,0,23,
  	253,1,0,0,0,25,258,1,0,0,0,27,265,1,0,0,0,29,270,1,0,0,0,31,275,1,0,0,
  	0,33,282,1,0,0,0,35,286,1,0,0,0,37,288,1,0,0,0,39,290,1,0,0,0,41,304,
  	1,0,0,0,43,310,1,0,0,0,45,326,1,0,0,0,47,332,1,0,0,0,49,334,1,0,0,0,51,
  	338,1,0,0,0,53,341,1,0,0,0,55,348,1,0,0,0,57,351,1,0,0,0,59,354,1,0,0,
  	0,61,356,1,0,0,0,63,358,1,0,0,0,65,360,1,0,0,0,67,362,1,0,0,0,69,364,
  	1,0,0,0,71,366,1,0,0,0,73,368,1,0,0,0,75,371,1,0,0,0,77,374,1,0,0,0,79,
  	377,1,0,0,0,81,380,1,0,0,0,83,383,1,0,0,0,85,385,1,0,0,0,87,387,1,0,0,
  	0,89,390,1,0,0,0,91,393,1,0,0,0,93,395,1,0,0,0,95,397,1,0,0,0,97,400,
  	1,0,0,0,99,403,1,0,0,0,101,406,1,0,0,0,103,409,1,0,0,0,105,412,1,0,0,
  	0,107,416,1,0,0,0,109,420,1,0,0,0,111,423,1,0,0,0,113,426,1,0,0,0,115,
  	430,1,0,0,0,117,444,1,0,0,0,119,458,1,0,0,0,121,464,1,0,0,0,123,470,1,
  	0,0,0,125,479,1,0,0,0,127,485,1,0,0,0,129,492,1,0,0,0,131,495,1,0,0,0,
  	133,500,1,0,0,0,135,506,1,0,0,0,137,513,1,0,0,0,139,520,1,0,0,0,141,528,
  	1,0,0,0,143,533,1,0,0,0,145,539,1,0,0,0,147,546,1,0,0,0,149,551,1,0,0,
  	0,151,560,1,0,0,0,153,567,1,0,0,0,155,576,1,0,0,0,157,583,1,0,0,0,159,
  	590,1,0,0,0,161,593,1,0,0,0,163,599,1,0,0,0,165,609,1,0,0,0,167,620,1,
  	0,0,0,169,627,1,0,0,0,171,639,1,0,0,0,173,669,1,0,0,0,175,708,1,0,0,0,
  	177,754,1,0,0,0,179,765,1,0,0,0,181,770,1,0,0,0,183,782,1,0,0,0,185,787,
  	1,0,0,0,187,791,1,0,0,0,189,810,1,0,0,0,191,817,1,0,0,0,193,828,1,0,0,
  	0,195,839,1,0,0,0,197,847,1,0,0,0,199,849,1,0,0,0,201,868,1,0,0,0,203,
  	881,1,0,0,0,205,883,1,0,0,0,207,887,1,0,0,0,209,896,1,0,0,0,211,900,1,
  	0,0,0,213,904,1,0,0,0,215,906,1,0,0,0,217,913,1,0,0,0,219,915,1,0,0,0,
  	221,917,1,0,0,0,223,929,1,0,0,0,225,932,1,0,0,0,227,938,1,0,0,0,229,952,
  	1,0,0,0,231,232,5,46,0,0,232,2,1,0,0,0,233,234,5,59,0,0,234,4,1,0,0,0,
  	235,236,5,91,0,0,236,6,1,0,0,0,237,238,5,44,0,0,238,8,1,0,0,0,239,240,
  	5,93,0,0,240,10,1,0,0,0,241,242,5,61,0,0,242,12,1,0,0,0,243,244,5,123,
  	0,0,244,14,1,0,0,0,245,246,5,125,0,0,246,16,1,0,0,0,247,248,5,64,0,0,
  	248,18,1,0,0,0,249,250,5,40,0,0,250,20,1,0,0,0,251,252,5,41,0,0,252,22,
  	1,0,0,0,253,254,5,98,0,0,254,255,5,111,0,0,255,256,5,111,0,0,256,257,
  	5,108,0,0,257,24,1,0,0,0,258,259,5,115,0,0,259,260,5,116,0,0,260,261,
  	5,114,0,0,261,262,5,105,0,0,262,263,5,110,0,0,263,264,5,103,0,0,264,26,
  	1,0,0,0,265,266,5,98,0,0,266,267,5,108,0,0,267,268,5,111,0,0,268,269,
  	5,98,0,0,269,28,1,0,0,0,270,271,5,104,0,0,271,272,5,97,0,0,272,273,5,
  	115,0,0,273,274,5,104,0,0,274,30,1,0,0,0,275,276,5,98,0,0,276,277,5,105,
  	0,0,277,278,5,103,0,0,278,279,5,105,0,0,279,280,5,110,0,0,280,281,5,116,
  	0,0,281,32,1,0,0,0,282,283,5,109,0,0,283,284,5,97,0,0,284,285,5,112,0,
  	0,285,34,1,0,0,0,286,287,5,60,0,0,287,36,1,0,0,0,288,289,5,62,0,0,289,
  	38,1,0,0,0,290,291,5,115,0,0,291,292,5,99,0,0,292,293,5,97,0,0,293,294,
  	5,116,0,0,294,295,5,116,0,0,295,296,5,101,0,0,296,297,5,114,0,0,297,298,
  	5,101,0,0,298,299,5,100,0,0,299,300,5,95,0,0,300,301,5,109,0,0,301,302,
  	5,97,0,0,302,303,5,112,0,0,303,40,1,0,0,0,304,305,5,97,0,0,305,306,5,
  	114,0,0,306,307,5,114,0,0,307,308,5,97,0,0,308,309,5,121,0,0,309,42,1,
  	0,0,0,310,311,5,115,0,0,311,312,5,99,0,0,312,313,5,97,0,0,313,314,5,116,
  	0,0,314,315,5,116,0,0,315,316,5,101,0,0,316,317,5,114,0,0,317,318,5,101,
  	0,0,318,319,5,100,0,0,319,320,5,95,0,0,320,321,5,97,0,0,321,322,5,114,
  	0,0,322,323,5,114,0,0,323,324,5,97,0,0,324,325,5,121,0,0,325,44,1,0,0,
  	0,326,327,5,119,0,0,327,328,5,104,0,0,328,329,5,105,0,0,329,330,5,108,
  	0,0,330,331,5,101,0,0,331,46,1,0,0,0,332,333,5,94,0,0,333,48,1,0,0,0,
  	334,335,5,102,0,0,335,336,5,111,0,0,336,337,5,114,0,0,337,50,1,0,0,0,
  	338,339,5,100,0,0,339,340,5,111,0,0,340,52,1,0,0,0,341,342,5,114,0,0,
  	342,343,5,101,0,0,343,344,5,116,0,0,344,345,5,117,0,0,345,346,5,114,0,
  	0,346,347,5,110,0,0,347,54,1,0,0,0,348,349,5,43,0,0,349,350,5,43,0,0,
  	350,56,1,0,0,0,351,352,5,45,0,0,352,353,5,45,0,0,353,58,1,0,0,0,354,355,
  	5,43,0,0,355,60,1,0,0,0,356,357,5,45,0,0,357,62,1,0,0,0,358,359,5,33,
  	0,0,359,64,1,0,0,0,360,361,5,126,0,0,361,66,1,0,0,0,362,363,5,42,0,0,
  	363,68,1,0,0,0,364,365,5,47,0,0,365,70,1,0,0,0,366,367,5,37,0,0,367,72,
  	1,0,0,0,368,369,5,60,0,0,369,370,5,60,0,0,370,74,1,0,0,0,371,372,5,60,
  	0,0,372,373,5,61,0,0,373,76,1,0,0,0,374,375,5,62,0,0,375,376,5,61,0,0,
  	376,78,1,0,0,0,377,378,5,61,0,0,378,379,5,61,0,0,379,80,1,0,0,0,380,381,
  	5,33,0,0,381,382,5,61,0,0,382,82,1,0,0,0,383,384,5,38,0,0,384,84,1,0,
  	0,0,385,386,5,124,0,0,386,86,1,0,0,0,387,388,5,38,0,0,388,389,5,38,0,
  	0,389,88,1,0,0,0,390,391,5,124,0,0,391,392,5,124,0,0,392,90,1,0,0,0,393,
  	394,5,63,0,0,394,92,1,0,0,0,395,396,5,58,0,0,396,94,1,0,0,0,397,398,5,
  	43,0,0,398,399,5,61,0,0,399,96,1,0,0,0,400,401,5,45,0,0,401,402,5,61,
  	0,0,402,98,1,0,0,0,403,404,5,42,0,0,404,405,5,61,0,0,405,100,1,0,0,0,
  	406,407,5,47,0,0,407,408,5,61,0,0,408,102,1,0,0,0,409,410,5,37,0,0,410,
  	411,5,61,0,0,411,104,1,0,0,0,412,413,5,60,0,0,413,414,5,60,0,0,414,415,
  	5,61,0,0,415,106,1,0,0,0,416,417,5,62,0,0,417,418,5,62,0,0,418,419,5,
  	61,0,0,419,108,1,0,0,0,420,421,5,38,0,0,421,422,5,61,0,0,422,110,1,0,
  	0,0,423,424,5,94,0,0,424,425,5,61,0,0,425,112,1,0,0,0,426,427,5,124,0,
  	0,427,428,5,61,0,0,428,114,1,0,0,0,429,431,7,0,0,0,430,429,1,0,0,0,430,
  	431,1,0,0,0,431,432,1,0,0,0,432,433,5,47,0,0,433,434,5,47,0,0,434,435,
  	5,47,0,0,435,439,1,0,0,0,436,438,9,0,0,0,437,436,1,0,0,0,438,441,1,0,
  	0,0,439,440,1,0,0,0,439,437,1,0,0,0,440,442,1,0,0,0,441,439,1,0,0,0,442,
  	443,7,1,0,0,443,116,1,0,0,0,444,445,5,47,0,0,445,446,5,42,0,0,446,447,
  	5,42,0,0,447,451,1,0,0,0,448,450,9,0,0,0,449,448,1,0,0,0,450,453,1,0,
  	0,0,451,452,1,0,0,0,451,449,1,0,0,0,452,454,1,0,0,0,453,451,1,0,0,0,454,
  	455,5,42,0,0,455,456,5,42,0,0,456,457,5,47,0,0,457,118,1,0,0,0,458,459,
  	5,98,0,0,459,460,5,114,0,0,460,461,5,101,0,0,461,462,5,97,0,0,462,463,
  	5,107,0,0,463,120,1,0,0,0,464,465,5,99,0,0,465,466,5,111,0,0,466,467,
  	5,110,0,0,467,468,5,115,0,0,468,469,5,116,0,0,469,122,1,0,0,0,470,471,
  	5,99,0,0,471,472,5,111,0,0,472,473,5,110,0,0,473,474,5,116,0,0,474,475,
  	5,105,0,0,475,476,5,110,0,0,476,477,5,117,0,0,477,478,5,101,0,0,478,124,
  	1,0,0,0,479,480,5,114,0,0,480,481,5,101,0,0,481,482,5,108,0,0,482,483,
  	5,97,0,0,483,484,5,121,0,0,484,126,1,0,0,0,485,486,5,115,0,0,486,487,
  	5,117,0,0,487,488,5,112,0,0,488,489,5,112,0,0,489,490,5,108,0,0,490,491,
  	5,121,0,0,491,128,1,0,0,0,492,493,5,105,0,0,493,494,5,102,0,0,494,130,
  	1,0,0,0,495,496,5,101,0,0,496,497,5,108,0,0,497,498,5,115,0,0,498,499,
  	5,101,0,0,499,132,1,0,0,0,500,501,5,115,0,0,501,502,5,104,0,0,502,503,
  	5,97,0,0,503,504,5,114,0,0,504,505,5,100,0,0,505,134,1,0,0,0,506,507,
  	5,115,0,0,507,508,5,104,0,0,508,509,5,97,0,0,509,510,5,114,0,0,510,511,
  	5,100,0,0,511,512,5,115,0,0,512,136,1,0,0,0,513,514,5,103,0,0,514,515,
  	5,108,0,0,515,516,5,111,0,0,516,517,5,98,0,0,517,518,5,97,0,0,518,519,
  	5,108,0,0,519,138,1,0,0,0,520,521,5,97,0,0,521,522,5,100,0,0,522,523,
  	5,100,0,0,523,524,5,114,0,0,524,525,5,101,0,0,525,526,5,115,0,0,526,527,
  	5,115,0,0,527,140,1,0,0,0,528,529,5,97,0,0,529,530,5,117,0,0,530,531,
  	5,116,0,0,531,532,5,111,0,0,532,142,1,0,0,0,533,534,5,109,0,0,534,535,
  	5,105,0,0,535,536,5,110,0,0,536,537,5,101,0,0,537,538,5,114,0,0,538,144,
  	1,0,0,0,539,540,5,115,0,0,540,541,5,116,0,0,541,542,5,114,0,0,542,543,
  	5,117,0,0,543,544,5,99,0,0,544,545,5,116,0,0,545,146,1,0,0,0,546,547,
  	5,101,0,0,547,548,5,110,0,0,548,549,5,117,0,0,549,550,5,109,0,0,550,148,
  	1,0,0,0,551,552,5,99,0,0,552,553,5,111,0,0,553,554,5,110,0,0,554,555,
  	5,116,0,0,555,556,5,114,0,0,556,557,5,97,0,0,557,558,5,99,0,0,558,559,
  	5,116,0,0,559,150,1,0,0,0,560,561,5,105,0,0,561,562,5,109,0,0,562,563,
  	5,112,0,0,563,564,5,111,0,0,564,565,5,114,0,0,565,566,5,116,0,0,566,152,
  	1,0,0,0,567,568,5,102,0,0,568,569,5,117,0,0,569,570,5,110,0,0,570,571,
  	5,99,0,0,571,572,5,116,0,0,572,573,5,105,0,0,573,574,5,111,0,0,574,575,
  	5,110,0,0,575,154,1,0,0,0,576,577,5,112,0,0,577,578,5,117,0,0,578,579,
  	5,98,0,0,579,580,5,108,0,0,580,581,5,105,0,0,581,582,5,99,0,0,582,156,
  	1,0,0,0,583,584,5,101,0,0,584,585,5,120,0,0,585,586,5,112,0,0,586,587,
  	5,111,0,0,587,588,5,114,0,0,588,589,5,116,0,0,589,158,1,0,0,0,590,591,
  	5,97,0,0,591,592,5,115,0,0,592,160,1,0,0,0,593,594,5,117,0,0,594,595,
  	5,115,0,0,595,596,5,105,0,0,596,597,5,110,0,0,597,598,5,103,0,0,598,162,
  	1,0,0,0,599,600,5,105,0,0,600,601,5,110,0,0,601,602,5,116,0,0,602,603,
  	5,101,0,0,603,604,5,114,0,0,604,605,5,102,0,0,605,606,5,97,0,0,606,607,
  	5,99,0,0,607,608,5,101,0,0,608,164,1,0,0,0,609,610,5,105,0,0,610,611,
  	5,109,0,0,611,612,5,112,0,0,612,613,5,108,0,0,613,614,5,101,0,0,614,615,
  	5,109,0,0,615,616,5,101,0,0,616,617,5,110,0,0,617,618,5,116,0,0,618,619,
  	5,115,0,0,619,166,1,0,0,0,620,621,5,100,0,0,621,622,5,101,0,0,622,623,
  	5,112,0,0,623,624,5,108,0,0,624,625,5,111,0,0,625,626,5,121,0,0,626,168,
  	1,0,0,0,627,628,5,99,0,0,628,629,5,111,0,0,629,630,5,110,0,0,630,631,
  	5,115,0,0,631,632,5,116,0,0,632,633,5,114,0,0,633,634,5,117,0,0,634,635,
  	5,99,0,0,635,636,5,116,0,0,636,637,5,111,0,0,637,638,5,114,0,0,638,170,
  	1,0,0,0,639,640,5,110,0,0,640,641,5,101,0,0,641,642,5,120,0,0,642,643,
  	5,116,0,0,643,172,1,0,0,0,644,645,5,102,0,0,645,646,5,108,0,0,646,647,
  	5,111,0,0,647,648,5,97,0,0,648,649,5,116,0,0,649,650,5,50,0,0,650,651,
  	5,53,0,0,651,670,5,54,0,0,652,653,5,102,0,0,653,654,5,108,0,0,654,655,
  	5,111,0,0,655,656,5,97,0,0,656,657,5,116,0,0,657,658,5,53,0,0,658,659,
  	5,49,0,0,659,670,5,50,0,0,660,661,5,102,0,0,661,662,5,108,0,0,662,663,
  	5,111,0,0,663,664,5,97,0,0,664,665,5,116,0,0,665,666,5,49,0,0,666,667,
  	5,48,0,0,667,668,5,50,0,0,668,670,5,52,0,0,669,644,1,0,0,0,669,652,1,
  	0,0,0,669,660,1,0,0,0,670,174,1,0,0,0,671,672,5,105,0,0,672,673,5,110,
  	0,0,673,674,5,116,0,0,674,709,5,56,0,0,675,676,5,105,0,0,676,677,5,110,
  	0,0,677,678,5,116,0,0,678,679,5,49,0,0,679,709,5,54,0,0,680,681,5,105,
  	0,0,681,682,5,110,0,0,682,683,5,116,0,0,683,684,5,51,0,0,684,709,5,50,
  	0,0,685,686,5,105,0,0,686,687,5,110,0,0,687,688,5,116,0,0,688,689,5,54,
  	0,0,689,709,5,52,0,0,690,691,5,105,0,0,691,692,5,110,0,0,692,693,5,116,
  	0,0,693,694,5,49,0,0,694,695,5,50,0,0,695,709,5,56,0,0,696,697,5,105,
  	0,0,697,698,5,110,0,0,698,699,5,116,0,0,699,700,5,50,0,0,700,701,5,53,
  	0,0,701,709,5,54,0,0,702,703,5,105,0,0,703,704,5,110,0,0,704,705,5,116,
  	0,0,705,706,5,53,0,0,706,707,5,49,0,0,707,709,5,50,0,0,708,671,1,0,0,
  	0,708,675,1,0,0,0,708,680,1,0,0,0,708,685,1,0,0,0,708,690,1,0,0,0,708,
  	696,1,0,0,0,708,702,1,0,0,0,709,176,1,0,0,0,710,711,5,117,0,0,711,712,
  	5,105,0,0,712,713,5,110,0,0,713,714,5,116,0,0,714,755,5,56,0,0,715,716,
  	5,117,0,0,716,717,5,105,0,0,717,718,5,110,0,0,718,719,5,116,0,0,719,720,
  	5,49,0,0,720,755,5,54,0,0,721,722,5,117,0,0,722,723,5,105,0,0,723,724,
  	5,110,0,0,724,725,5,116,0,0,725,726,5,51,0,0,726,755,5,50,0,0,727,728,
  	5,117,0,0,728,729,5,105,0,0,729,730,5,110,0,0,730,731,5,116,0,0,731,732,
  	5,54,0,0,732,755,5,52,0,0,733,734,5,117,0,0,734,735,5,105,0,0,735,736,
  	5,110,0,0,736,737,5,116,0,0,737,738,5,49,0,0,738,739,5,50,0,0,739,755,
  	5,56,0,0,740,741,5,117,0,0,741,742,5,105,0,0,742,743,5,110,0,0,743,744,
  	5,116,0,0,744,745,5,50,0,0,745,746,5,53,0,0,746,755,5,54,0,0,747,748,
  	5,117,0,0,748,749,5,105,0,0,749,750,5,110,0,0,750,751,5,116,0,0,751,752,
  	5,53,0,0,752,753,5,49,0,0,753,755,5,50,0,0,754,710,1,0,0,0,754,715,1,
  	0,0,0,754,721,1,0,0,0,754,727,1,0,0,0,754,733,1,0,0,0,754,740,1,0,0,0,
  	754,747,1,0,0,0,755,178,1,0,0,0,756,757,5,116,0,0,757,758,5,114,0,0,758,
  	759,5,117,0,0,759,766,5,101,0,0,760,761,5,102,0,0,761,762,5,97,0,0,762,
  	763,5,108,0,0,763,764,5,115,0,0,764,766,5,101,0,0,765,756,1,0,0,0,765,
  	760,1,0,0,0,766,180,1,0,0,0,767,769,3,203,101,0,768,767,1,0,0,0,769,772,
  	1,0,0,0,770,768,1,0,0,0,770,771,1,0,0,0,771,773,1,0,0,0,772,770,1,0,0,
  	0,773,775,5,46,0,0,774,776,3,203,101,0,775,774,1,0,0,0,776,777,1,0,0,
  	0,777,775,1,0,0,0,777,778,1,0,0,0,778,780,1,0,0,0,779,781,3,201,100,0,
  	780,779,1,0,0,0,780,781,1,0,0,0,781,182,1,0,0,0,782,784,3,185,92,0,783,
  	785,3,199,99,0,784,783,1,0,0,0,784,785,1,0,0,0,785,184,1,0,0,0,786,788,
  	3,203,101,0,787,786,1,0,0,0,788,789,1,0,0,0,789,787,1,0,0,0,789,790,1,
  	0,0,0,790,186,1,0,0,0,791,792,3,191,95,0,792,808,5,58,0,0,793,794,5,101,
  	0,0,794,795,5,100,0,0,795,796,5,50,0,0,796,797,5,53,0,0,797,798,5,53,
  	0,0,798,799,5,49,0,0,799,809,5,57,0,0,800,801,5,99,0,0,801,802,5,111,
  	0,0,802,803,5,110,0,0,803,804,5,116,0,0,804,805,5,114,0,0,805,806,5,97,
  	0,0,806,807,5,99,0,0,807,809,5,116,0,0,808,793,1,0,0,0,808,800,1,0,0,
  	0,809,188,1,0,0,0,810,811,3,193,96,0,811,812,5,58,0,0,812,813,5,104,0,
  	0,813,814,5,97,0,0,814,815,5,115,0,0,815,816,5,104,0,0,816,190,1,0,0,
  	0,817,818,3,195,97,0,818,819,3,195,97,0,819,820,3,195,97,0,820,821,3,
  	195,97,0,821,822,3,195,97,0,822,823,3,195,97,0,823,824,3,195,97,0,824,
  	825,3,195,97,0,825,826,3,197,98,0,826,827,3,197,98,0,827,192,1,0,0,0,
  	828,829,3,195,97,0,829,830,3,195,97,0,830,831,3,195,97,0,831,832,3,195,
  	97,0,832,833,3,195,97,0,833,834,3,195,97,0,834,835,3,195,97,0,835,836,
  	3,197,98,0,836,837,3,197,98,0,837,838,3,197,98,0,838,194,1,0,0,0,839,
  	840,3,197,98,0,840,841,3,197,98,0,841,842,3,197,98,0,842,843,3,197,98,
  	0,843,844,3,197,98,0,844,845,3,197,98,0,845,846,3,197,98,0,846,196,1,
  	0,0,0,847,848,7,2,0,0,848,198,1,0,0,0,849,866,7,3,0,0,850,867,5,56,0,
  	0,851,852,5,49,0,0,852,867,5,54,0,0,853,854,5,51,0,0,854,867,5,50,0,0,
  	855,856,5,54,0,0,856,867,5,52,0,0,857,858,5,49,0,0,858,859,5,50,0,0,859,
  	867,5,56,0,0,860,861,5,50,0,0,861,862,5,53,0,0,862,867,5,54,0,0,863,864,
  	5,53,0,0,864,865,5,49,0,0,865,867,5,50,0,0,866,850,1,0,0,0,866,851,1,
  	0,0,0,866,853,1,0,0,0,866,855,1,0,0,0,866,857,1,0,0,0,866,860,1,0,0,0,
  	866,863,1,0,0,0,866,867,1,0,0,0,867,200,1,0,0,0,868,879,5,102,0,0,869,
  	870,5,50,0,0,870,871,5,53,0,0,871,880,5,54,0,0,872,873,5,53,0,0,873,874,
  	5,49,0,0,874,880,5,50,0,0,875,876,5,49,0,0,876,877,5,48,0,0,877,878,5,
  	50,0,0,878,880,5,52,0,0,879,869,1,0,0,0,879,872,1,0,0,0,879,875,1,0,0,
  	0,879,880,1,0,0,0,880,202,1,0,0,0,881,882,7,4,0,0,882,204,1,0,0,0,883,
  	885,3,207,103,0,884,886,3,199,99,0,885,884,1,0,0,0,885,886,1,0,0,0,886,
  	206,1,0,0,0,887,888,5,48,0,0,888,889,7,5,0,0,889,893,3,213,106,0,890,
  	892,3,213,106,0,891,890,1,0,0,0,892,895,1,0,0,0,893,891,1,0,0,0,893,894,
  	1,0,0,0,894,208,1,0,0,0,895,893,1,0,0,0,896,897,3,185,92,0,897,898,5,
  	105,0,0,898,899,5,98,0,0,899,210,1,0,0,0,900,901,3,207,103,0,901,902,
  	5,105,0,0,902,903,5,98,0,0,903,212,1,0,0,0,904,905,7,6,0,0,905,214,1,
  	0,0,0,906,910,3,217,108,0,907,909,3,219,109,0,908,907,1,0,0,0,909,912,
  	1,0,0,0,910,908,1,0,0,0,910,911,1,0,0,0,911,216,1,0,0,0,912,910,1,0,0,
  	0,913,914,7,7,0,0,914,218,1,0,0,0,915,916,7,8,0,0,916,220,1,0,0,0,917,
  	921,5,34,0,0,918,920,3,223,111,0,919,918,1,0,0,0,920,923,1,0,0,0,921,
  	919,1,0,0,0,921,922,1,0,0,0,922,924,1,0,0,0,923,921,1,0,0,0,924,925,5,
  	34,0,0,925,222,1,0,0,0,926,930,8,9,0,0,927,928,5,92,0,0,928,930,9,0,0,
  	0,929,926,1,0,0,0,929,927,1,0,0,0,930,224,1,0,0,0,931,933,7,10,0,0,932,
  	931,1,0,0,0,933,934,1,0,0,0,934,932,1,0,0,0,934,935,1,0,0,0,935,936,1,
  	0,0,0,936,937,6,112,0,0,937,226,1,0,0,0,938,939,5,47,0,0,939,940,5,42,
  	0,0,940,944,1,0,0,0,941,943,9,0,0,0,942,941,1,0,0,0,943,946,1,0,0,0,944,
  	945,1,0,0,0,944,942,1,0,0,0,945,947,1,0,0,0,946,944,1,0,0,0,947,948,5,
  	42,0,0,948,949,5,47,0,0,949,950,1,0,0,0,950,951,6,113,1,0,951,228,1,0,
  	0,0,952,953,5,47,0,0,953,954,5,47,0,0,954,958,1,0,0,0,955,957,8,1,0,0,
  	956,955,1,0,0,0,957,960,1,0,0,0,958,956,1,0,0,0,958,959,1,0,0,0,959,961,
  	1,0,0,0,960,958,1,0,0,0,961,962,6,114,1,0,962,230,1,0,0,0,24,0,430,439,
  	451,669,708,754,765,770,777,780,784,789,808,866,879,885,893,910,921,929,
  	934,944,958,2,6,0,0,0,1,0
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  predalexerLexerStaticData = staticData.release();
}

}

PredaLexer::PredaLexer(CharStream *input) : Lexer(input) {
  PredaLexer::initialize();
  _interpreter = new atn::LexerATNSimulator(this, *predalexerLexerStaticData->atn, predalexerLexerStaticData->decisionToDFA, predalexerLexerStaticData->sharedContextCache);
}

PredaLexer::~PredaLexer() {
  delete _interpreter;
}

std::string PredaLexer::getGrammarFileName() const {
  return "Preda.g4";
}

const std::vector<std::string>& PredaLexer::getRuleNames() const {
  return predalexerLexerStaticData->ruleNames;
}

const std::vector<std::string>& PredaLexer::getChannelNames() const {
  return predalexerLexerStaticData->channelNames;
}

const std::vector<std::string>& PredaLexer::getModeNames() const {
  return predalexerLexerStaticData->modeNames;
}

const dfa::Vocabulary& PredaLexer::getVocabulary() const {
  return predalexerLexerStaticData->vocabulary;
}

antlr4::atn::SerializedATNView PredaLexer::getSerializedATN() const {
  return predalexerLexerStaticData->serializedATN;
}

const atn::ATN& PredaLexer::getATN() const {
  return *predalexerLexerStaticData->atn;
}




void PredaLexer::initialize() {
  ::antlr4::internal::call_once(predalexerLexerOnceFlag, predalexerLexerInitialize);
}
